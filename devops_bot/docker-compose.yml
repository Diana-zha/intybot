version: "3"
services:
  bot:
    image: 192.168.22.142:5000/bot_image
    # if u want to start wo registry
    build:
      ./tg_bot
    environment:
      - TOKEN=${TOKEN}
      - RM_HOST=${RM_HOST}
      - RM_PORT=${RM_PORT}
      - RM_USER=${RM_USER}
      - RM_PASSWORD=${RM_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
    volumes:
      - pg_logs:/var/log/
    container_name: "${BOT}"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: 192.168.22.142:5000/db_image
    # if u want to start wo registry
    build:
      ./db
    volumes:
      - pg_logs:/var/log/
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - DB_REPL_USER=${DB_REPL_USER}
      - DB_REPL_PASSWORD=${DB_REPL_PASSWORD}
      - DB_REPL_HOST=${DB_REPL_HOST}.my_network
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
    container_name: "${DB_HOST}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  db_repl:
    image: 192.168.22.142:5000/db_repl_image
    # if u want to start wo registry
    build:
      ./db_repl
    container_name: "${DB_REPL_HOST}"
    environment:
      - DB_HOST=${DB_HOST}.my_network
      - DB_PORT=${DB_PORT}
      - DB_REPL_HOST=${DB_REPL_HOST}
      - DB_REPL_PORT=${DB_REPL_PORT}
      - DB_REPL_USER=${DB_REPL_USER}
      - DB_REPL_PASSWORD=${DB_REPL_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy

volumes:
  pg_logs:
networks:
  default:
    name: my_network
    driver: bridge
